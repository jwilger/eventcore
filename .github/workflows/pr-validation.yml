name: PR Validation
# 
# This workflow validates PR descriptions and enforces checklist completion.
# 
# For automatic draft conversion to work, you need to:
# 1. Create a Personal Access Token (PAT) with 'repo' scope
# 2. Add it as a repository secret named 'PR_DRAFT_PAT'
# 
# Without the PAT, the workflow will still validate checklists but won't
# be able to automatically convert PRs to draft status.

on:
  pull_request:
    types: [opened, edited, ready_for_review, synchronize]

permissions:
  pull-requests: write
  issues: write
  contents: read
  statuses: write

jobs:
  validate-pr-description:
    name: Validate PR Description
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Description
        uses: actions/github-script@v7
        with:
          # Use PAT if available for draft conversion, otherwise fall back to default token
          github-token: ${{ secrets.PR_DRAFT_PAT || github.token }}
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            
            // Skip validation for draft PRs
            if (pr.draft) {
              console.log('‚úÖ Skipping validation for draft PR');
              return;
            }
            
            // Skip validation for Dependabot PRs
            if (pr.user.login === 'dependabot[bot]') {
              console.log('‚úÖ Skipping validation for Dependabot PR');
              return;
            }
            
            // Required sections from our template
            const requiredSections = [
              '## Description',
              '## Type of Change',
              '## Submitter Checklist',
              '## Review Focus'
            ];
            
            const missingSections = requiredSections.filter(section => !body.includes(section));
            
            if (missingSections.length > 0) {
              const errorMessage = `
              ‚ùå **PR Description Validation Failed**
              
              Your PR description is missing required sections from the template:
              ${missingSections.map(s => `- ${s}`).join('\n')}
              
              Please update your PR description to include all required sections from the [PR template](.github/pull_request_template.md).
              
              **Tip**: You can edit your PR description by clicking the "..." menu in the top right of the PR description and selecting "Edit".
              `;
              
              core.setFailed(errorMessage);
              
              // Also post a comment for visibility
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: errorMessage
              });
              return;
            }
            
            // Check for empty checkboxes in submitter checklist
            const checkboxPattern = /- \[ \]/g;
            
            // Extract submitter checklist section
            // Use negative lookahead to match until next ## (not ###)
            const submitterSection = body.match(/## Submitter Checklist[\s\S]*?(?=\n##\s|$)/);
            
            let submitterHasUnchecked = false;
            
            // Debug logging
            console.log('=== DEBUG: Checking sections for unchecked items ===');
            console.log('Submitter section found:', !!submitterSection);
            
            if (submitterSection) {
              console.log('Submitter section content:', submitterSection[0]);
              console.log('Unchecked boxes in submitter:', submitterSection[0].match(checkboxPattern));
            }
            
            // Check submitter section for unchecked items
            if (submitterSection && submitterSection[0].match(checkboxPattern)) {
              console.log('Submitter checklist has unchecked items');
              submitterHasUnchecked = true;
            }
            
            console.log('Submitter has unchecked items:', submitterHasUnchecked);
            
            // If submitter checklist has unchecked items, convert to draft
            if (submitterHasUnchecked) {
              console.log('Converting PR to draft due to incomplete submitter checklist');
              
              let conversionWorked = false;
              
              try {
                // Convert to draft using GraphQL API
                const mutation = `
                  mutation ConvertPullRequestToDraft($pullRequestId: ID!) {
                    convertPullRequestToDraft(input: { pullRequestId: $pullRequestId }) {
                      pullRequest {
                        id
                        number
                        isDraft
                      }
                    }
                  }
                `;
                
                const variables = {
                  pullRequestId: pr.node_id
                };
                
                console.log('Converting PR to draft using GraphQL, node_id:', pr.node_id);
                const response = await github.graphql(mutation, variables);
                console.log('GraphQL response:', JSON.stringify(response, null, 2));
                
                if (response.convertPullRequestToDraft && response.convertPullRequestToDraft.pullRequest) {
                  console.log('Successfully converted PR to draft:', response.convertPullRequestToDraft.pullRequest.isDraft);
                  conversionWorked = response.convertPullRequestToDraft.pullRequest.isDraft === true;
                }
              } catch (error) {
                console.error('Failed to convert to draft via GraphQL:', error.message);
                if (error.message.includes('Resource not accessible')) {
                  console.error('Note: Draft conversion requires a PAT. Set PR_DRAFT_PAT secret with a token that has repo scope.');
                }
                console.error('Error details:', error);
                
                // Fallback to REST API
                try {
                  console.log('Attempting REST API fallback...');
                  const restResponse = await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    draft: true
                  });
                  console.log('REST API response:', restResponse.status);
                  console.log('Updated PR draft status:', restResponse.data.draft);
                  conversionWorked = restResponse.data.draft === true;
                } catch (restError) {
                  console.error('REST API also failed:', restError.message);
                }
              }
              
              const draftMessage = conversionWorked ? `
              üîÑ **PR Converted to Draft**
              
              This PR has been automatically converted to draft status because the **Submitter Checklist** has unchecked items.
              
              **Next Steps:**
              1. Review and check off all items in the Submitter Checklist after verifying each one
              2. Once all checklist items are complete, click "Ready for review"
              
              **Note**: Each checkbox represents a quality gate that must be manually verified.
              ` : `
              ‚ö†Ô∏è **PR Should Be Draft**
              
              This PR should be in draft status because the **Submitter Checklist** has unchecked items.
              
              **Action Required:**
              1. Click "Convert to draft" on this PR
              2. Review and check off all items in the Submitter Checklist after verifying each one
              3. Once all checklist items are complete, click "Ready for review"
              
              **Note**: Automatic draft conversion is not available. Please manually click "Convert to draft" above.
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: draftMessage
              });
              
              core.setFailed('PR converted to draft due to incomplete submitter checklist');
              return;
            }
            
            console.log('‚úÖ PR description follows template and submitter checklist is complete');