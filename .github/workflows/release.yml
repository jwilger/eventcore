name: Release

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      
      - name: Get commit SHA for tag
        id: get_sha
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Validating release for commit: $COMMIT_SHA"
      
      - name: Check CI status for commit
        id: check_ci
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          COMMIT_SHA="${{ steps.get_sha.outputs.commit_sha }}"
          echo "Checking CI status for commit $COMMIT_SHA"
          
          # Wait up to 10 minutes for CI to complete
          MAX_ATTEMPTS=40
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # Get all check runs for this commit
            CHECK_RUNS=$(gh api "/repos/${{ github.repository }}/commits/$COMMIT_SHA/check-runs" --jq '.check_runs')
            
            # Check if CI workflow exists and its status
            CI_STATUS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.name == "Build") | .status')
            CI_CONCLUSION=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.name == "Build") | .conclusion')
            
            if [ -z "$CI_STATUS" ]; then
              echo "CI workflow not found for this commit. Waiting..."
              sleep 15
              ATTEMPT=$((ATTEMPT + 1))
              continue
            fi
            
            if [ "$CI_STATUS" = "completed" ]; then
              if [ "$CI_CONCLUSION" = "success" ]; then
                echo "CI passed for commit $COMMIT_SHA"
                exit 0
              else
                echo "CI failed for commit $COMMIT_SHA with conclusion: $CI_CONCLUSION"
                exit 1
              fi
            else
              echo "CI is still running (status: $CI_STATUS). Waiting..."
              sleep 15
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          echo "Timeout waiting for CI to complete"
          exit 1
      
      - name: Extract versions from Cargo.toml files
        id: cargo_versions
        run: |
          # Extract version from workspace root
          ROOT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "root_version=$ROOT_VERSION" >> $GITHUB_OUTPUT
          
          # Extract versions from all workspace members
          EVENTCORE_VERSION=$(grep '^version = ' eventcore/Cargo.toml | head -1 | cut -d'"' -f2)
          echo "eventcore_version=$EVENTCORE_VERSION" >> $GITHUB_OUTPUT
          
          POSTGRES_VERSION=$(grep '^version = ' eventcore-postgres/Cargo.toml | head -1 | cut -d'"' -f2)
          echo "postgres_version=$POSTGRES_VERSION" >> $GITHUB_OUTPUT
          
          MEMORY_VERSION=$(grep '^version = ' eventcore-memory/Cargo.toml | head -1 | cut -d'"' -f2)
          echo "memory_version=$MEMORY_VERSION" >> $GITHUB_OUTPUT
          
          MACROS_VERSION=$(grep '^version = ' eventcore-macros/Cargo.toml | head -1 | cut -d'"' -f2)
          echo "macros_version=$MACROS_VERSION" >> $GITHUB_OUTPUT
          
          # Verify all versions match
          if [ "$EVENTCORE_VERSION" != "$ROOT_VERSION" ] || 
             [ "$POSTGRES_VERSION" != "$ROOT_VERSION" ] || 
             [ "$MEMORY_VERSION" != "$ROOT_VERSION" ] || 
             [ "$MACROS_VERSION" != "$ROOT_VERSION" ]; then
            echo "Error: Not all crate versions match!"
            echo "Root: $ROOT_VERSION"
            echo "eventcore: $EVENTCORE_VERSION"
            echo "eventcore-postgres: $POSTGRES_VERSION"
            echo "eventcore-memory: $MEMORY_VERSION"
            echo "eventcore-macros: $MACROS_VERSION"
            exit 1
          fi
      
      - name: Validate version match
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          CARGO_VERSION="${{ steps.cargo_versions.outputs.root_version }}"
          
          # Extract major.minor.patch from both versions
          TAG_BASE="${TAG_VERSION%%-*}"  # Remove everything after first hyphen
          CARGO_BASE="${CARGO_VERSION%%-*}"  # Remove everything after first hyphen
          
          if [ "$TAG_BASE" != "$CARGO_BASE" ]; then
            echo "Error: Tag version base ($TAG_BASE) does not match Cargo.toml version base ($CARGO_BASE)"
            exit 1
          fi
      
      - name: Check and update prerelease status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          
          # Check if version has a suffix (prerelease)
          if [[ "$TAG_VERSION" == *"-"* ]]; then
            # Version has suffix, should be prerelease
            if [ "${{ github.event.release.prerelease }}" != "true" ]; then
              echo "Version has suffix, marking as prerelease"
              gh release edit "${{ github.event.release.tag_name }}" --prerelease
            fi
          fi
      
      - name: Delete release on validation failure
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Validation failed, deleting release and tag"
          gh release delete "${{ github.event.release.tag_name }}" --yes
          git push origin :refs/tags/${{ github.event.release.tag_name }}

  publish-crates:
    name: Publish to crates.io
    needs: validate-release
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == false
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Share cache with CI workflow
          shared-key: "ci"
      
      - name: Start PostgreSQL
        run: |
          docker run -d \
            --name postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=eventcore_test \
            -p 5432:5432 \
            postgres:15
          
          # Wait for PostgreSQL to be ready
          sleep 10
      
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/eventcore_test
        run: cargo test --workspace
      
      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          echo "Publishing eventcore-macros..."
          (cd eventcore-macros && cargo publish)
          
          # Wait for crates.io to index
          sleep 30
          
          echo "Publishing eventcore..."
          (cd eventcore && cargo publish)
          
          sleep 30
          
          echo "Publishing eventcore-postgres..."
          (cd eventcore-postgres && cargo publish)
          
          echo "Publishing eventcore-memory..."
          (cd eventcore-memory && cargo publish)

  publish-docs:
    name: Publish Documentation
    needs: validate-release
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == false
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Share cache with CI workflow
          shared-key: "ci"
      
      - name: Cache mdBook
        uses: actions/cache@v4
        id: mdbook-cache
        with:
          path: ~/.cargo/bin/mdbook
          key: mdbook-0.4.40

      - name: Install mdBook
        if: steps.mdbook-cache.outputs.cache-hit != 'true'
        run: |
          MDBOOK_VERSION="0.4.40"
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v${MDBOOK_VERSION}/mdbook-v${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          mkdir -p ~/.cargo/bin
          mv mdbook ~/.cargo/bin/
          chmod +x ~/.cargo/bin/mdbook
      
      - name: Add cargo bin to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Build API documentation
        run: |
          cargo doc --no-deps --workspace
          # Copy to website output
          mkdir -p website/book/api
          cp -r target/doc/* website/book/api/
      
      - name: Sync documentation
        run: |
          cd website
          chmod +x sync-docs.sh
          ./sync-docs.sh
      
      - name: Build website
        run: |
          cd website
          mdbook build
      
      - name: Add version information
        run: |
          # Add release version to the website
          VERSION="${{ github.event.release.tag_name }}"
          RELEASE_URL="${{ github.event.release.html_url }}"
          
          # Create a version banner
          cat > website/book/version.js << EOF
          document.addEventListener('DOMContentLoaded', function() {
            const banner = document.createElement('div');
            banner.className = 'version-banner';
            banner.innerHTML = \`
              <span>Version: <a href="${RELEASE_URL}">${VERSION}</a></span>
            \`;
            document.body.insertBefore(banner, document.body.firstChild);
          });
          EOF
          
          # Add CSS for version banner
          cat >> website/book/theme/css/custom.css << EOF
          
          .version-banner {
            background: var(--eventcore-orange);
            color: white;
            padding: 0.5rem 1rem;
            text-align: center;
            font-size: 0.9rem;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          
          .version-banner a {
            color: white;
            font-weight: bold;
            text-decoration: underline;
          }
          EOF
          
          # Include version script in all HTML files
          find website/book -name "*.html" -type f -exec sed -i '/<\/body>/i <script src="/eventcore/version.js"></script>' {} \;
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: website/book
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4