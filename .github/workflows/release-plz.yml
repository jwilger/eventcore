name: Release-plz

# This workflow handles both creating release PRs and publishing to crates.io.
# It uses a Personal Access Token (PAT) instead of GITHUB_TOKEN to ensure
# that CI workflows are triggered on the created PR.
#
# Setup:
# - PR_DRAFT_PAT: GitHub PAT with repo permissions for creating PRs
# - CARGO_REGISTRY_TOKEN: crates.io token for publishing
#
# The workflow has two different behaviors:
# 1. On regular push to main: Creates/updates a release PR (release-pr command)
# 2. When a release PR is merged: Publishes packages to crates.io (release command)
#
# This separation ensures that manual version bumps don't trigger immediate
# publishing, and that packages are published in the correct dependency order.

permissions:
  pull-requests: write
  contents: write
  id-token: write  # For publishing to crates.io

on:
  push:
    branches:
      - main

jobs:
  release-plz:
    name: Release-plz
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PR_DRAFT_PAT }}
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      # Determine if this is a release PR merge by checking the commit message
      - name: Check if this is a release PR merge
        id: check_release
        run: |
          # Get the commit message of the HEAD commit
          COMMIT_MSG=$(git log -1 --pretty=%s --)
          echo "Commit message: \"$COMMIT_MSG\""
          
          # Check if this is a release PR merge (contains "chore: release")
          if [[ "$COMMIT_MSG" =~ ^chore:[[:space:]]release ]]; then
            echo "This is a release PR merge"
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "This is a regular commit"
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
      
      # Run release-pr command for regular commits
      - name: Create/Update Release PR
        if: steps.check_release.outputs.is_release == 'false'
        uses: release-plz/action@v0.5.117
        env:
          GITHUB_TOKEN: ${{ secrets.PR_DRAFT_PAT }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        with:
          command: release-pr
          # Enable debug output
          rust_log: debug
      
      # Cache cargo-workspaces for better performance
      - name: Cache cargo-workspaces
        if: steps.check_release.outputs.is_release == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-workspaces
          key: cargo-workspaces-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-workspaces-${{ runner.os }}-
      
      # Install cargo-workspaces for topological ordering
      - name: Install cargo-workspaces
        if: steps.check_release.outputs.is_release == 'true'
        run: |
          if ! command -v cargo-workspaces &> /dev/null; then
            cargo install cargo-workspaces --locked
          fi
      
      # Run release command only for release PR merges
      # Using cargo-workspaces instead of release-plz to ensure
      # workspace crates are published in topological (dependency) order
      - name: Publish to crates.io
        if: steps.check_release.outputs.is_release == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish workspace crates in topological order
          # --from-git skips version bumping (already done by release-plz)
          # --publish-interval 30 gives crates.io time to update its index between publishes
          # This prevents "crate not found" errors for workspace dependencies
          cargo workspaces publish --from-git --publish-interval 30 --yes
      
      # Create GitHub releases and tags after successful publishing
      # We need to temporarily set publish=false to skip cargo publish
      # since we already published with cargo-workspaces
      - name: Create GitHub releases and tags
        if: steps.check_release.outputs.is_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PR_DRAFT_PAT }}
        run: |
          # Create temporary config to disable publishing
          cat > .release-plz-temp.toml << 'EOF'
          [workspace]
          publish = false
          # Copy other settings from main config
          release_always = true
          allow_dirty = true
          dependencies_update = false
          git_release_enable = true
          git_tag_enable = true
          git_tag_name = "v{{ version }}"
          changelog_update = true
          
          [changelog]
          commit_parsers = [
            { message = "^.*", group = "Changes" },
          ]
          EOF
          
          # Cache release-plz binary
          - name: Cache release-plz binary
            uses: actions/cache@v3
            with:
              path: ~/.cargo/bin/release-plz
              key: ${{ runner.os }}-release-plz-${{ hashFiles('**/Cargo.lock') }}
              restore-keys: |
                ${{ runner.os }}-release-plz-
          
          # Install release-plz if not already cached
          - name: Install release-plz
            if: ![ -x ~/.cargo/bin/release-plz ]
            run: cargo install release-plz --locked
          
          # Run release-plz with temporary config to create releases and tags only
          release-plz release --config .release-plz-temp.toml
          
          # Clean up
          rm .release-plz-temp.toml