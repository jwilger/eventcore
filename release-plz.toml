[workspace]
# Update all workspace members together
release_always = true

# Allow dirty working directory (for CI)
allow_dirty = true

# Dependencies update
# TODO: Re-enable after initial release (temporarily disabled because workspace dependencies are not yet published to crates.io)
dependencies_update = false

# Note: Due to failed release attempts, v0.1.1 and v0.1.2 tags exist but weren't fully published.
# The workspace is at v0.1.3 to bypass these issues.

# Git configuration
git_release_enable = true  # Create GitHub releases
git_tag_enable = true      # Create git tags
git_tag_name = "v{{ version }}"  # Single tag for all packages: v0.1.8

# PR configuration
pr_labels = ["release", "automated"]
pr_draft = true  # Create release PRs as drafts

# Changelog configuration
changelog_update = true

[changelog]
# Use conventional commits for changelog generation
# Group commits by type for better organization
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^docs", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactoring" },
  { message = "^style", group = "Style" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\):", skip = true },
  { message = "^chore\\(deps\\)", group = "Dependencies" },
  { message = "^chore\\(deps-dev\\)", group = "Development Dependencies" },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { message = "^build", group = "Build System" },
  { message = "^ci", group = "Continuous Integration" },
  { message = "^revert", group = "Reverts" },
]

# Sort commit groups in a logical order
sort_commits = "oldest"

# Use scope from conventional commits when present
protect_breaking_commits = true

# Package-specific configuration
# 
# IMPORTANT: release-plz does not always respect dependency order when publishing.
# See: https://github.com/release-plz/release-plz/issues/1316
# 
# The correct publishing order based on dependencies is:
# 1. eventcore-macros (no internal dependencies)
# 2. eventcore (depends on macros)
# 3. eventcore-memory (depends on eventcore)
# 4. eventcore-postgres (depends on eventcore and eventcore-memory)
#
# However, release-plz may publish in a different order, causing failures.
# If this happens, packages need to be manually published in the correct order.
[[package]]
name = "eventcore-macros"
release = true
# Ensure only commits affecting this package are included
changelog_include = ["eventcore-macros/**"]
# Also include commits with explicit scope
changelog_path = "./eventcore-macros/CHANGELOG.md"

[[package]]
name = "eventcore"
release = true
# Include commits affecting the core library
changelog_include = ["eventcore/src/**", "eventcore/Cargo.toml"]
# Exclude macro-specific changes
changelog_exclude = ["eventcore-macros/**"]
changelog_path = "./eventcore/CHANGELOG.md"

[[package]]
name = "eventcore-memory"
release = true
changelog_include = ["eventcore-memory/**"]
changelog_path = "./eventcore-memory/CHANGELOG.md"

[[package]]
name = "eventcore-postgres"
release = true
changelog_include = ["eventcore-postgres/**"]
changelog_path = "./eventcore-postgres/CHANGELOG.md"

# Don't publish example and benchmark crates
[[package]]
name = "eventcore-examples"
publish = false

[[package]]
name = "eventcore-benchmarks"
publish = false